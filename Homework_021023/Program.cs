// Задача 34: Задайте массив заполненный случайными положительными 
// трёхзначными числами. Напишите программу, которая покажет количество 
// чётных чисел в массиве.
// [345, 897, 568, 234] -> 2
// ___________________________________________________________________


// int[] CreateRandomArray(int size)
// {
//     int[] array = new int[size]; // Создаем массив целых чисел заданного размера.
//     Random random = new Random(); // Создаем объект класса Random для генерации случайных чисел.

//     for (int i = 0; i < size; i++)
//     {
//         array[i] = random.Next(100, 1000); // Заполняем массив случайными трёхзначными числами (от 100 до 999).
//     }

//     return array; // Возвращаем сгенерированный массив.
// }

// int CountEvenNumbers(int[] array)
// {
//     int count = 0; // Инициализируем переменную для подсчета чётных чисел.

//     for (int i = 0; i < array.Length; i++)
//     {
//         if (array[i] % 2 == 0) // Проверяем, является ли число в массиве чётным.
//         {
//             count++; // Если число чётное, увеличиваем счетчик на 1.
//         }
//     }

//     return count; // Возвращаем количество чётных чисел в массиве.
// }

// int[] myArray = CreateRandomArray(10); // Создаем массив из 10 случайных трёхзначных чисел.
// int evenCount = CountEvenNumbers(myArray); // Считаем количество чётных чисел в массиве.

// Console.WriteLine("Сгенерированный массив:");
// for (int i = 0; i < myArray.Length; i++)
// {
//     Console.Write(myArray[i] + " "); // Выводим элементы массива на экран.
// }

// Console.WriteLine("\nКоличество чётных чисел в массиве: " + evenCount); // Выводим количество чётных чисел.


// _____________________________________________________________________
// Задача 36: Задайте одномерный массив, заполненный случайными числами. 
// Найдите сумму элементов, стоящих на нечётных позициях.
// [3, 7, 23, 12] -> 19
// [-4, -6, 89, 6] -> 0
// // _______________________________________________________________________



// int[] CreateRandomArray(int size, int minValue, int maxValue)
// {
//     int[] array = new int[size]; // Создаем массив целых чисел заданного размера.
//     Random random = new Random();

//     for (int i = 0; i < size; i++)
//     {
//         array[i] = random.Next(minValue, maxValue + 1); // Заполняем массив случайными числами в указанном диапазоне.
//     }

//     return array; // Возвращаем сгенерированный массив.
// }

// int SumOfOddPositionElements(int[] array)
// {
//     int sum = 0; // Инициализируем переменную для суммы нечётных элементов.

//     for (int i = 1; i < array.Length; i += 2)
//     {
//         sum += array[i]; // Суммируем элементы, стоящие на нечётных позициях.
//     }

//     return sum; // Возвращаем сумму элементов на нечётных позициях.
// }

// int[] myArray = CreateRandomArray(4, -10, 10); // Создаем массив из 4 случайных чисел в диапазоне от -10 до 10.
// int sumOfOddElements = SumOfOddPositionElements(myArray); // Находим сумму элементов на нечётных позициях.

// Console.WriteLine("Сгенерированный массив:");
// for (int i = 0; i < myArray.Length; i++)
// {
//     Console.Write(myArray[i] + " "); // Выводим элементы массива на экран.
// }

// Console.WriteLine("\nСумма элементов на нечётных позициях: " + sumOfOddElements); // Выводим сумму на экран.



// // ______________________________________________________________________
// Задача 38: Задайте массив вещественных чисел. Найдите разницу между 
// максимальным и минимальным элементов массива.
// [3.22, 4.2, 1.15, 77.15, 65.2] => 77.15 - 1.15 = 76
// // ______________________________________________________________________





// double[] CreateRandomArray(int size, double minValue, double maxValue)
// {
//     double[] array = new double[size]; // Создаем массив вещественных чисел заданного размера.
//     Random random = new Random();

//     for (int i = 0; i < size; i++)
//     {
//         double randomNumber = random.NextDouble() * (maxValue - minValue) + minValue;
//         array[i] = Math.Round(randomNumber, 2); // Заполняем массив случайными вещественными числами, округленными до сотых.
//     }

//     return array; // Возвращаем сгенерированный массив.
// }

// double FindMax(double[] array)
// {
//     double max = array[0]; // Инициализируем переменную максимума первым элементом массива.

//     for (int i = 1; i < array.Length; i++)
//     {
//         if (array[i] > max)
//         {
//             max = array[i]; // Если находим больший элемент, обновляем максимум.
//         }
//     }

//     return max; // Возвращаем максимальный элемент.
// }

// double FindMin(double[] array)
// {
//     double min = array[0]; // Инициализируем переменную минимума первым элементом массива.

//     for (int i = 1; i < array.Length; i++)
//     {
//         if (array[i] < min)
//         {
//             min = array[i]; // Если находим меньший элемент, обновляем минимум.
//         }
//     }

//     return min; // Возвращаем минимальный элемент.
// }

// double[] myArray = CreateRandomArray(5, 0.0, 100.0); // Создаем массив из 5 случайных вещественных чисел в диапазоне от 0.0 до 100.0.
// double maxElement = FindMax(myArray); // Находим максимальный элемент.
// double minElement = FindMin(myArray); // Находим минимальный элемент.
// double difference = maxElement - minElement; // Находим разницу между максимальным и минимальным элементами.

// Console.WriteLine("Сгенерированный массив:");
// for (int i = 0; i < myArray.Length; i++)
// {
//     Console.Write(myArray[i] + " "); // Выводим элементы массива на экран.
// }

// Console.WriteLine("\nМаксимальный элемент: " + maxElement);
// Console.WriteLine("Минимальный элемент: " + minElement);
// Console.WriteLine("Разница между максимальным и минимальным элементами: " + difference);


